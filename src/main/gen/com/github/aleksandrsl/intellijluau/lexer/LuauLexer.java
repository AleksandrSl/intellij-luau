// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/grammar/Luau.flex

package com.github.aleksandrsl.intellijluau.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.github.aleksandrsl.intellijluau.psi.LuauTypes.*;
import com.intellij.psi.TokenType;
import java.util.Stack;


class LuauLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int xSHEBANG = 2;
  public static final int xDOUBLE_QUOTED_STRING = 4;
  public static final int xSINGLE_QUOTED_STRING = 6;
  public static final int xCOMMENT = 8;
  public static final int xTEMPLATE_STRING = 10;
  public static final int xTEMPLATE_STRING_EXPRESSION = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\40\u0100\u1000\u0600";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\10\1\0\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\10\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\0\1\35\1\36\2\35\1\37\1\35\5\40\1\41"+
    "\10\40\1\42\2\40\1\43\2\40\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\40\1\63\1\64\1\40"+
    "\1\65\1\66\1\67\1\40\1\70\1\71\1\72\1\73"+
    "\1\40\1\74\1\43\1\40\1\75\1\76\1\77\1\100"+
    "\1\101\6\0\1\3\32\0\1\102\136\0\u0181\40\1\103"+
    "\177\40\13\103\35\40\2\104\5\40\1\103\57\40\1\103"+
    "\240\40\1\103\377\40\u0100\105\u0100\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1792];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\2\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\15\27\1\34\1\35\1\36"+
    "\1\1\1\37\1\40\1\41\1\0\1\42\1\1\1\43"+
    "\1\44\1\4\1\15\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\20\1\55\1\56\1\20\5\0"+
    "\1\57\1\60\1\61\1\62\1\63\2\27\1\64\5\27"+
    "\1\65\1\66\3\27\1\67\5\27\1\70\1\40\1\0"+
    "\1\41\1\0\1\71\1\0\1\42\4\0\1\72\1\73"+
    "\1\74\2\20\1\0\2\20\1\75\2\27\1\76\1\27"+
    "\1\77\2\27\1\100\1\101\6\27\1\40\1\41\1\71"+
    "\1\102\4\0\1\20\1\27\1\103\5\27\1\104\1\105"+
    "\2\27\4\0\1\106\1\107\1\110\1\27\1\111\1\27"+
    "\1\112\2\27\1\113\1\114\3\0\1\115\1\27\1\116"+
    "\1\117\3\0\1\27\1\0\1\120\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u01ea\0\u0276\0\u02bc\0\u01ea\0\u01ea\0\u01ea\0\u01ea"+
    "\0\u0302\0\u0348\0\u01ea\0\u038e\0\u03d4\0\u041a\0\u0460\0\u04a6"+
    "\0\u04ec\0\u01ea\0\u0532\0\u0578\0\u05be\0\u01ea\0\u0604\0\u01ea"+
    "\0\u01ea\0\u064a\0\u01ea\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8"+
    "\0\u07ee\0\u0834\0\u087a\0\u08c0\0\u0906\0\u094c\0\u0992\0\u09d8"+
    "\0\u01ea\0\u01ea\0\u01ea\0\u0a1e\0\106\0\u0a64\0\u0aaa\0\u0af0"+
    "\0\u0b36\0\u0b7c\0\u01ea\0\u01ea\0\u01ea\0\u0bc2\0\u01ea\0\u01ea"+
    "\0\u01ea\0\u01ea\0\u0c08\0\u01ea\0\u01ea\0\u0c4e\0\u0c94\0\u0cda"+
    "\0\u01ea\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u01ea"+
    "\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u0ec4\0\u0f0a\0\u0604\0\u0f50"+
    "\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u0604\0\u0604\0\u10ae\0\u10f4"+
    "\0\u113a\0\u0604\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298\0\u01ea"+
    "\0\u01ea\0\u12de\0\u01ea\0\u1324\0\u136a\0\u0b7c\0\u13b0\0\u13f6"+
    "\0\u143c\0\u1482\0\u14c8\0\u01ea\0\u01ea\0\u01ea\0\u150e\0\u1554"+
    "\0\u159a\0\u01ea\0\u15e0\0\u0604\0\u1626\0\u166c\0\u0604\0\u16b2"+
    "\0\u0604\0\u16f8\0\u173e\0\u0604\0\u0604\0\u1784\0\u17ca\0\u1810"+
    "\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa\0\u1a40"+
    "\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70"+
    "\0\u1cb6\0\u1cfc\0\u1d42\0\u0604\0\u0604\0\u1d88\0\u1dce\0\u1e14"+
    "\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u0604\0\u1fb8\0\u0604"+
    "\0\u1ffe\0\u0604\0\u2044\0\u208a\0\u0604\0\u0604\0\u20d0\0\u2116"+
    "\0\u215c\0\u0604\0\u21a2\0\u0604\0\u0604\0\u21e8\0\u222e\0\u2274"+
    "\0\u22ba\0\u2300\0\u0604\0\u2346\0\u238c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\2\11\1\10\2\11\1\10\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\2\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\7\37\1\40\1\10\1\41\1\42\1\37"+
    "\1\43\1\44\1\45\1\37\1\46\1\47\1\50\2\37"+
    "\1\51\1\37\1\52\1\53\1\54\1\37\1\55\1\37"+
    "\1\56\1\57\1\60\1\37\1\61\1\62\1\63\1\64"+
    "\1\10\3\37\2\65\1\0\2\65\1\0\100\65\7\10"+
    "\1\66\111\10\1\67\72\10\21\0\1\70\64\0\2\71"+
    "\1\10\2\71\1\10\37\71\1\72\3\71\1\73\24\71"+
    "\1\74\7\71\1\10\2\11\1\10\2\11\1\10\1\12"+
    "\1\75\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\76\1\25\1\26\1\27\2\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\7\37\1\40\1\10\1\41"+
    "\1\42\1\37\1\43\1\44\1\45\1\37\1\46\1\47"+
    "\1\50\2\37\1\51\1\37\1\52\1\53\1\54\1\37"+
    "\1\55\1\37\1\56\1\57\1\60\1\37\1\61\1\62"+
    "\1\63\1\64\1\10\3\37\107\0\2\11\1\0\2\11"+
    "\106\0\1\77\131\0\1\100\105\0\1\101\105\0\1\102"+
    "\74\0\1\103\10\0\1\104\1\105\74\0\1\106\1\0"+
    "\3\107\102\0\1\110\6\0\1\111\75\0\1\112\1\0"+
    "\3\30\7\0\1\113\1\114\1\0\1\115\1\116\1\117"+
    "\4\0\1\30\2\0\1\113\2\0\1\114\51\0\1\112"+
    "\1\0\3\30\10\0\1\114\1\0\1\115\1\116\5\0"+
    "\1\30\5\0\1\114\56\0\1\120\110\0\1\121\105\0"+
    "\1\122\105\0\1\123\77\0\3\37\6\0\7\37\4\0"+
    "\1\37\1\0\24\37\5\0\3\37\32\0\1\124\77\0"+
    "\3\37\6\0\7\37\4\0\1\37\1\0\13\37\1\125"+
    "\10\37\5\0\3\37\24\0\3\37\6\0\7\37\4\0"+
    "\1\37\1\0\16\37\1\126\5\37\5\0\3\37\24\0"+
    "\3\37\6\0\7\37\4\0\1\37\1\0\14\37\1\127"+
    "\7\37\5\0\3\37\24\0\3\37\6\0\7\37\4\0"+
    "\1\37\1\0\12\37\1\130\1\131\10\37\5\0\3\37"+
    "\24\0\3\37\6\0\7\37\4\0\1\37\1\0\1\132"+
    "\13\37\1\133\4\37\1\134\2\37\5\0\3\37\24\0"+
    "\3\37\6\0\7\37\4\0\1\37\1\0\5\37\1\135"+
    "\5\37\1\136\10\37\5\0\3\37\24\0\3\37\6\0"+
    "\7\37\4\0\1\37\1\0\14\37\1\137\7\37\5\0"+
    "\3\37\24\0\3\37\6\0\7\37\4\0\1\37\1\0"+
    "\10\37\1\140\3\37\1\141\7\37\5\0\3\37\24\0"+
    "\3\37\6\0\7\37\4\0\1\37\1\0\16\37\1\142"+
    "\5\37\5\0\3\37\24\0\3\37\6\0\7\37\4\0"+
    "\1\37\1\0\4\37\1\143\17\37\5\0\3\37\24\0"+
    "\3\37\6\0\7\37\4\0\1\37\1\0\7\37\1\144"+
    "\6\37\1\145\5\37\5\0\3\37\24\0\3\37\6\0"+
    "\7\37\4\0\1\37\1\0\13\37\1\146\10\37\5\0"+
    "\3\37\24\0\3\37\6\0\7\37\4\0\1\37\1\0"+
    "\7\37\1\147\14\37\5\0\3\37\32\0\1\150\53\0"+
    "\2\66\1\0\2\66\1\0\1\66\1\151\35\66\1\152"+
    "\40\66\2\67\1\0\2\67\1\0\5\67\1\153\31\67"+
    "\1\154\40\67\21\0\1\155\64\0\2\71\1\0\2\71"+
    "\1\0\37\71\1\156\3\71\1\0\24\71\1\0\12\71"+
    "\2\0\70\71\1\157\6\71\34\0\1\104\1\105\130\0"+
    "\1\160\11\0\1\161\5\0\1\162\1\0\1\163\27\0"+
    "\1\164\7\0\1\165\77\0\3\107\21\0\1\107\67\0"+
    "\1\166\77\0\3\167\103\0\2\170\77\0\1\171\1\0"+
    "\1\171\2\0\3\107\120\0\1\172\105\0\1\115\70\0"+
    "\3\173\6\0\3\173\12\0\6\173\52\0\3\37\6\0"+
    "\7\37\4\0\1\37\1\0\3\37\1\174\20\37\5\0"+
    "\3\37\24\0\3\37\6\0\7\37\4\0\1\37\1\0"+
    "\4\37\1\175\17\37\5\0\3\37\24\0\3\37\6\0"+
    "\7\37\4\0\1\37\1\0\17\37\1\176\4\37\5\0"+
    "\3\37\24\0\3\37\6\0\7\37\4\0\1\37\1\0"+
    "\3\37\1\177\20\37\5\0\3\37\24\0\3\37\6\0"+
    "\7\37\4\0\1\37\1\0\12\37\1\200\11\37\5\0"+
    "\3\37\24\0\3\37\6\0\7\37\4\0\1\37\1\0"+
    "\16\37\1\201\5\37\5\0\3\37\24\0\3\37\6\0"+
    "\7\37\4\0\1\37\1\0\13\37\1\202\10\37\5\0"+
    "\3\37\24\0\3\37\6\0\7\37\4\0\1\37\1\0"+
    "\2\37\1\203\21\37\5\0\3\37\24\0\3\37\6\0"+
    "\7\37\4\0\1\37\1\0\12\37\1\204\11\37\5\0"+
    "\3\37\24\0\3\37\6\0\7\37\4\0\1\37\1\0"+
    "\20\37\1\205\3\37\5\0\3\37\24\0\3\37\6\0"+
    "\7\37\4\0\1\37\1\0\15\37\1\206\2\37\1\207"+
    "\3\37\5\0\3\37\24\0\3\37\6\0\7\37\4\0"+
    "\1\37\1\0\4\37\1\210\17\37\5\0\3\37\24\0"+
    "\3\37\6\0\7\37\4\0\1\37\1\0\21\37\1\211"+
    "\2\37\5\0\3\37\24\0\3\37\6\0\7\37\4\0"+
    "\1\37\1\0\20\37\1\212\3\37\5\0\3\37\24\0"+
    "\3\37\6\0\7\37\4\0\1\37\1\0\10\37\1\213"+
    "\13\37\5\0\3\37\3\66\2\0\70\66\1\214\6\66"+
    "\2\0\3\67\2\0\70\67\1\215\6\67\2\0\2\216"+
    "\1\0\2\216\1\0\13\216\1\217\64\216\1\71\5\157"+
    "\37\71\1\156\3\71\1\0\24\71\1\0\3\71\3\157"+
    "\1\71\65\0\1\220\76\0\1\221\125\0\1\222\107\0"+
    "\1\223\31\0\3\167\10\0\1\114\10\0\1\167\5\0"+
    "\1\114\53\0\2\170\22\0\1\170\61\0\3\107\103\0"+
    "\3\173\6\0\2\173\1\224\1\0\1\115\1\116\5\0"+
    "\1\173\1\0\4\173\1\224\1\173\52\0\3\37\6\0"+
    "\7\37\4\0\1\37\1\0\1\225\23\37\5\0\3\37"+
    "\24\0\3\37\6\0\7\37\4\0\1\37\1\0\4\37"+
    "\1\226\17\37\5\0\3\37\24\0\3\37\6\0\7\37"+
    "\4\0\1\37\1\0\17\37\1\227\4\37\5\0\3\37"+
    "\24\0\3\37\6\0\7\37\4\0\1\37\1\0\2\37"+
    "\1\230\21\37\5\0\3\37\24\0\3\37\6\0\7\37"+
    "\4\0\1\37\1\0\1\231\23\37\5\0\3\37\24\0"+
    "\3\37\6\0\7\37\4\0\1\37\1\0\4\37\1\232"+
    "\17\37\5\0\3\37\24\0\3\37\6\0\7\37\4\0"+
    "\1\37\1\0\21\37\1\233\2\37\5\0\3\37\24\0"+
    "\3\37\6\0\7\37\4\0\1\37\1\0\13\37\1\234"+
    "\10\37\5\0\3\37\24\0\3\37\6\0\7\37\4\0"+
    "\1\37\1\0\4\37\1\235\17\37\5\0\3\37\24\0"+
    "\3\37\6\0\7\37\4\0\1\37\1\0\10\37\1\236"+
    "\13\37\5\0\3\37\24\0\3\37\6\0\7\37\4\0"+
    "\1\37\1\0\12\37\1\237\11\37\5\0\3\37\1\66"+
    "\5\214\1\66\1\151\35\66\1\152\34\66\3\214\1\66"+
    "\1\67\5\215\5\67\1\153\31\67\1\154\34\67\3\215"+
    "\1\67\2\216\1\0\2\216\1\0\100\216\2\217\1\240"+
    "\2\217\1\241\100\217\55\0\1\242\110\0\1\243\123\0"+
    "\1\244\107\0\1\245\24\0\1\171\1\0\1\171\2\0"+
    "\3\173\6\0\2\173\1\224\1\0\1\115\1\116\5\0"+
    "\1\173\1\0\4\173\1\224\1\173\52\0\3\37\6\0"+
    "\7\37\4\0\1\37\1\0\11\37\1\246\12\37\5\0"+
    "\3\37\24\0\3\37\6\0\7\37\4\0\1\37\1\0"+
    "\10\37\1\247\13\37\5\0\3\37\24\0\3\37\6\0"+
    "\7\37\4\0\1\37\1\0\4\37\1\250\17\37\5\0"+
    "\3\37\24\0\3\37\6\0\7\37\4\0\1\37\1\0"+
    "\20\37\1\251\3\37\5\0\3\37\24\0\3\37\6\0"+
    "\7\37\4\0\1\37\1\0\12\37\1\252\11\37\5\0"+
    "\3\37\24\0\3\37\6\0\7\37\4\0\1\37\1\0"+
    "\1\253\23\37\5\0\3\37\24\0\3\37\6\0\7\37"+
    "\4\0\1\37\1\0\16\37\1\254\5\37\5\0\3\37"+
    "\24\0\3\37\6\0\7\37\4\0\1\37\1\0\12\37"+
    "\1\255\11\37\5\0\3\37\24\0\3\37\6\0\7\37"+
    "\4\0\1\37\1\0\4\37\1\256\17\37\5\0\3\37"+
    "\1\0\1\240\2\0\1\240\14\0\1\257\66\0\1\240"+
    "\173\0\1\260\77\0\1\261\23\0\2\244\1\0\2\244"+
    "\1\0\100\244\2\245\1\0\2\245\1\0\100\245\24\0"+
    "\3\37\6\0\7\37\4\0\1\37\1\0\5\37\1\262"+
    "\16\37\5\0\3\37\24\0\3\37\6\0\7\37\4\0"+
    "\1\37\1\0\10\37\1\263\13\37\5\0\3\37\24\0"+
    "\3\37\6\0\7\37\4\0\1\37\1\0\20\37\1\264"+
    "\3\37\5\0\3\37\24\0\3\37\6\0\7\37\4\0"+
    "\1\37\1\0\13\37\1\265\10\37\5\0\3\37\21\0"+
    "\1\266\142\0\1\267\115\0\1\270\43\0\3\37\6\0"+
    "\7\37\4\0\1\37\1\0\14\37\1\271\7\37\5\0"+
    "\3\37\21\0\1\217\144\0\1\272\112\0\1\244\44\0"+
    "\3\37\6\0\7\37\4\0\1\37\1\0\13\37\1\273"+
    "\10\37\5\0\3\37\62\0\1\274\111\0\1\275\104\0"+
    "\1\245\20\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9170];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\1\1\1\11\2\1\4\11\2\1\1\11"+
    "\6\1\1\11\3\1\1\11\1\1\2\11\1\1\1\11"+
    "\15\1\3\11\4\1\1\0\2\1\3\11\1\1\4\11"+
    "\1\1\2\11\3\1\1\11\1\1\5\0\5\11\23\1"+
    "\2\11\1\0\1\11\1\0\1\1\1\0\1\1\4\0"+
    "\3\11\2\1\1\0\1\11\25\1\4\0\14\1\4\0"+
    "\13\1\3\0\4\1\3\0\1\1\1\0\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public LuauLexer() {
    this((java.io.Reader)null);
  }
  private Stack<Integer> stack = new Stack<>();
  private void pushState(int state) {
      stack.push(yystate());
      yybegin(state);
  }
  private void popState() {
    Integer state = stack.pop();
    yybegin(state);
  }

   private int nBrackets = 0;
      private boolean checkAhead(char c, int offset) {
          return this.zzMarkedPos + offset < this.zzBuffer.length() && this.zzBuffer.charAt(this.zzMarkedPos + offset) == c;
      }

      private boolean checkBlock() {
          nBrackets = 0;
          if (checkAhead('[', 0)) {
              int n = 0;
              while (checkAhead('=', n + 1)) n++;
              if (checkAhead('[', n + 1)) {
                  nBrackets = n;
                  return true;
              }
          }
          return false;
      }

      private boolean checkDocBlock() {
          return checkAhead('-', nBrackets + 2)
              && checkAhead('-', nBrackets + 3)
              && checkAhead('-', nBrackets + 4);
      }

      private int checkBlockEnd() {
          int pos = zzMarkedPos;
          int end = zzEndRead;
          while(pos < end) {
              char c = zzBuffer.charAt(pos);
              if (c == ']') {
                  pos++;
                  int size = 0;
                  while (pos < zzEndRead && zzBuffer.charAt(pos) == '=') {
                      size++;
                      pos++;
                  }
                  if (size == nBrackets && pos < zzEndRead && zzBuffer.charAt(pos) == ']') {
                      pos++;
                      break;
                  }
                  continue;
              }
              pos++;
          }
          return pos - zzMarkedPos;
      }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LuauLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 81: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 82: break;
          case 3:
            { pushState(xDOUBLE_QUOTED_STRING); yypushback(yylength());
            }
          // fall through
          case 83: break;
          case 4:
            { return GETN;
            }
          // fall through
          case 84: break;
          case 5:
            { return MOD;
            }
          // fall through
          case 85: break;
          case 6:
            { return INTERSECTION;
            }
          // fall through
          case 86: break;
          case 7:
            { pushState(xSINGLE_QUOTED_STRING); yypushback(yylength());
            }
          // fall through
          case 87: break;
          case 8:
            { return LPAREN;
            }
          // fall through
          case 88: break;
          case 9:
            { return RPAREN;
            }
          // fall through
          case 89: break;
          case 10:
            { return MULT;
            }
          // fall through
          case 90: break;
          case 11:
            { return PLUS;
            }
          // fall through
          case 91: break;
          case 12:
            { return COMMA;
            }
          // fall through
          case 92: break;
          case 13:
            { return MINUS;
            }
          // fall through
          case 93: break;
          case 14:
            { return DOT;
            }
          // fall through
          case 94: break;
          case 15:
            { return DIV;
            }
          // fall through
          case 95: break;
          case 16:
            { return NUMBER;
            }
          // fall through
          case 96: break;
          case 17:
            { return COLON;
            }
          // fall through
          case 97: break;
          case 18:
            { return SEMI;
            }
          // fall through
          case 98: break;
          case 19:
            { return LT;
            }
          // fall through
          case 99: break;
          case 20:
            { return ASSIGN;
            }
          // fall through
          case 100: break;
          case 21:
            { return GT;
            }
          // fall through
          case 101: break;
          case 22:
            { return QUESTION;
            }
          // fall through
          case 102: break;
          case 23:
            { return ID;
            }
          // fall through
          case 103: break;
          case 24:
            { if (checkAhead('=', 0) || checkAhead('[', 0)) {
             yypushback(yylength());
             checkBlock();
             zzMarkedPos += checkBlockEnd();
             return STRING;
         } else {
             return LBRACK;
         }
            }
          // fall through
          case 104: break;
          case 25:
            { return RBRACK;
            }
          // fall through
          case 105: break;
          case 26:
            { return EXP;
            }
          // fall through
          case 106: break;
          case 27:
            { pushState(xTEMPLATE_STRING); return TEMPLATE_STRING_SQUOTE;
            }
          // fall through
          case 107: break;
          case 28:
            { return LCURLY;
            }
          // fall through
          case 108: break;
          case 29:
            { return UNION;
            }
          // fall through
          case 109: break;
          case 30:
            { if (yystate() == xTEMPLATE_STRING_EXPRESSION) { popState(); }; return RCURLY;
            }
          // fall through
          case 110: break;
          case 31:
            { popState(); return SHEBANG_CONTENT;
            }
          // fall through
          case 111: break;
          case 32:
            { popState(); if (yycharat(yylength() - 1) == '"') { return STRING; } else { return TokenType.BAD_CHARACTER; }
            }
          // fall through
          case 112: break;
          case 33:
            { popState(); if (yycharat(yylength() - 1) == '\'') { return STRING; } else { return TokenType.BAD_CHARACTER; }
            }
          // fall through
          case 113: break;
          case 34:
            { return STRING;
            }
          // fall through
          case 114: break;
          case 35:
            { popState(); return TEMPLATE_STRING_EQUOTE;
            }
          // fall through
          case 115: break;
          case 36:
            { pushState(xTEMPLATE_STRING_EXPRESSION); return LCURLY;
            }
          // fall through
          case 116: break;
          case 37:
            { pushState(xSHEBANG); return SHEBANG;
            }
          // fall through
          case 117: break;
          case 38:
            { return MOD_EQ;
            }
          // fall through
          case 118: break;
          case 39:
            { return MULT_EQ;
            }
          // fall through
          case 119: break;
          case 40:
            { return PLUS_EQ;
            }
          // fall through
          case 120: break;
          case 41:
            { boolean block = checkBlock();
          if (block) {
              boolean docBlock = checkDocBlock();
              yypushback(yylength());
              zzMarkedPos += checkBlockEnd();
              return docBlock ? DOC_BLOCK_COMMENT : BLOCK_COMMENT;
          }
          else { yypushback(yylength()); pushState(xCOMMENT); }
            }
          // fall through
          case 121: break;
          case 42:
            { return MINUS_EQ;
            }
          // fall through
          case 122: break;
          case 43:
            { return ARROW;
            }
          // fall through
          case 123: break;
          case 44:
            { return CONCAT;
            }
          // fall through
          case 124: break;
          case 45:
            { return DOUBLE_DIV;
            }
          // fall through
          case 125: break;
          case 46:
            { return DIV_EQ;
            }
          // fall through
          case 126: break;
          case 47:
            { return DOUBLE_COLON;
            }
          // fall through
          case 127: break;
          case 48:
            { return LE;
            }
          // fall through
          case 128: break;
          case 49:
            { return EQ;
            }
          // fall through
          case 129: break;
          case 50:
            { return GE;
            }
          // fall through
          case 130: break;
          case 51:
            { return EXP_EQ;
            }
          // fall through
          case 131: break;
          case 52:
            { return DO;
            }
          // fall through
          case 132: break;
          case 53:
            { return IF;
            }
          // fall through
          case 133: break;
          case 54:
            { return IN;
            }
          // fall through
          case 134: break;
          case 55:
            { return OR;
            }
          // fall through
          case 135: break;
          case 56:
            { return NE;
            }
          // fall through
          case 136: break;
          case 57:
            { popState(); return SHORT_COMMENT;
            }
          // fall through
          case 137: break;
          case 58:
            { return ELLIPSIS;
            }
          // fall through
          case 138: break;
          case 59:
            { return CONCAT_EQ;
            }
          // fall through
          case 139: break;
          case 60:
            { return DOUBLE_DIV_EQ;
            }
          // fall through
          case 140: break;
          case 61:
            { return AND;
            }
          // fall through
          case 141: break;
          case 62:
            { return END;
            }
          // fall through
          case 142: break;
          case 63:
            { return FOR;
            }
          // fall through
          case 143: break;
          case 64:
            { return NIL;
            }
          // fall through
          case 144: break;
          case 65:
            { return NOT;
            }
          // fall through
          case 145: break;
          case 66:
            { popState(); return DOC_COMMENT;
            }
          // fall through
          case 146: break;
          case 67:
            { return ELSE;
            }
          // fall through
          case 147: break;
          case 68:
            { return THEN;
            }
          // fall through
          case 148: break;
          case 69:
            { return TRUE;
            }
          // fall through
          case 149: break;
          case 70:
            { return REGION;
            }
          // fall through
          case 150: break;
          case 71:
            { return ENDREGION;
            }
          // fall through
          case 151: break;
          case 72:
            { return BREAK;
            }
          // fall through
          case 152: break;
          case 73:
            { return FALSE;
            }
          // fall through
          case 153: break;
          case 74:
            { return LOCAL;
            }
          // fall through
          case 154: break;
          case 75:
            { return UNTIL;
            }
          // fall through
          case 155: break;
          case 76:
            { return WHILE;
            }
          // fall through
          case 156: break;
          case 77:
            { return ELSEIF;
            }
          // fall through
          case 157: break;
          case 78:
            { return REPEAT;
            }
          // fall through
          case 158: break;
          case 79:
            { return RETURN;
            }
          // fall through
          case 159: break;
          case 80:
            { return FUNCTION;
            }
          // fall through
          case 160: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
