// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/grammar/Luau.flex

package com.github.aleksandrsl.intellijluau.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.github.aleksandrsl.intellijluau.psi.LuauTypes.*;
import com.intellij.psi.TokenType;


class LuauLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int xSHEBANG = 2;
  public static final int xDOUBLE_QUOTED_STRING = 4;
  public static final int xSINGLE_QUOTED_STRING = 6;
  public static final int xBLOCK_STRING = 8;
  public static final int xCOMMENT = 10;
  public static final int xBLOCK_COMMENT = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\317\u0100"+
    "\u1000\u0500";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\1\6\1\7\1\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\11\24\1\25\1\26\1\27\1\30\1\31\1\32\1\0"+
    "\4\33\1\34\1\33\5\35\1\36\3\35\1\37\4\35"+
    "\1\40\2\35\1\41\2\35\1\42\1\43\1\44\1\45"+
    "\1\35\1\0\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\35\1\57\1\60\1\35\1\61"+
    "\1\62\1\63\1\35\1\64\1\65\1\66\1\67\1\35"+
    "\1\70\1\41\2\35\1\71\1\72\1\73\1\74\6\0"+
    "\1\3\32\0\1\3\136\0\u0181\35\1\75\177\35\13\75"+
    "\35\35\2\75\5\35\1\75\57\35\1\75\240\35\1\75"+
    "\377\35\u0100\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\4\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\2\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\15\30\1\34\1\35"+
    "\1\36\1\37\2\40\1\0\1\41\1\42\1\43\1\21"+
    "\1\44\2\21\3\0\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\2\30\1\53\5\30\1\54\1\55\3\30\1\56"+
    "\5\30\1\57\1\40\2\0\1\60\4\0\1\61\1\21"+
    "\1\0\2\21\1\62\2\30\1\63\1\30\1\64\2\30"+
    "\1\65\1\66\6\30\1\60\1\67\5\0\1\21\1\0"+
    "\1\30\1\70\5\30\1\71\1\72\2\30\4\0\1\73"+
    "\1\74\1\21\1\75\1\30\1\76\1\30\1\77\2\30"+
    "\1\100\1\101\3\0\1\21\1\102\1\30\1\103\1\104"+
    "\3\0\1\30\1\0\1\105\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\370\0\u0174"+
    "\0\370\0\u01b2\0\370\0\370\0\370\0\370\0\370\0\370"+
    "\0\370\0\370\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326"+
    "\0\370\0\u0364\0\u03a2\0\u03e0\0\370\0\u041e\0\370\0\370"+
    "\0\370\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554\0\u0592\0\u05d0"+
    "\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744\0\370\0\370"+
    "\0\370\0\u0782\0\u07c0\0\u07fe\0\u083c\0\370\0\u087a\0\u08b8"+
    "\0\u08f6\0\370\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\370"+
    "\0\370\0\370\0\370\0\370\0\370\0\u0a6a\0\u0aa8\0\u041e"+
    "\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u041e\0\u041e\0\u0c1c"+
    "\0\u0c5a\0\u0c98\0\u041e\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce"+
    "\0\370\0\370\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42"+
    "\0\u0f80\0\370\0\u0fbe\0\u08f6\0\370\0\u0ffc\0\u041e\0\u103a"+
    "\0\u1078\0\u041e\0\u10b6\0\u041e\0\u10f4\0\u1132\0\u041e\0\u041e"+
    "\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322"+
    "\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512"+
    "\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u041e\0\u041e"+
    "\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876"+
    "\0\u18b4\0\u041e\0\u18f2\0\u041e\0\u1930\0\u041e\0\u196e\0\u19ac"+
    "\0\u041e\0\u041e\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u041e\0\u1ae2"+
    "\0\u041e\0\u041e\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u041e"+
    "\0\u1c56\0\u1c94";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\2\10\1\7\1\10\1\7\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\7\36\1\37\1\7\1\40\1\41\1\42"+
    "\1\43\1\36\1\44\1\45\1\46\2\36\1\47\1\36"+
    "\1\50\1\51\1\52\1\36\1\53\1\36\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\36\2\2\1\0"+
    "\1\2\1\0\71\2\6\0\1\63\101\0\1\64\201\0"+
    "\1\65\56\0\2\10\1\0\1\10\76\0\1\66\110\0"+
    "\1\67\76\0\1\70\1\0\2\71\73\0\1\72\74\0"+
    "\1\73\1\0\2\27\7\0\1\74\1\0\1\75\1\0"+
    "\1\76\1\77\10\0\1\74\44\0\1\73\1\0\2\27"+
    "\7\0\1\74\1\0\1\75\1\0\1\76\11\0\1\74"+
    "\50\0\1\100\77\0\1\101\1\102\75\0\1\103\75\0"+
    "\1\104\1\105\67\0\2\36\6\0\7\36\4\0\23\36"+
    "\4\0\1\36\23\0\2\36\6\0\7\36\4\0\13\36"+
    "\1\106\7\36\4\0\1\36\23\0\2\36\6\0\7\36"+
    "\4\0\16\36\1\107\4\36\4\0\1\36\23\0\2\36"+
    "\6\0\7\36\4\0\14\36\1\110\6\36\4\0\1\36"+
    "\23\0\2\36\6\0\7\36\4\0\12\36\1\111\1\112"+
    "\7\36\4\0\1\36\23\0\2\36\6\0\7\36\4\0"+
    "\1\113\13\36\1\114\4\36\1\115\1\36\4\0\1\36"+
    "\23\0\2\36\6\0\7\36\4\0\5\36\1\116\5\36"+
    "\1\117\7\36\4\0\1\36\23\0\2\36\6\0\7\36"+
    "\4\0\14\36\1\120\6\36\4\0\1\36\23\0\2\36"+
    "\6\0\7\36\4\0\10\36\1\121\3\36\1\122\6\36"+
    "\4\0\1\36\23\0\2\36\6\0\7\36\4\0\16\36"+
    "\1\123\4\36\4\0\1\36\23\0\2\36\6\0\7\36"+
    "\4\0\4\36\1\124\16\36\4\0\1\36\23\0\2\36"+
    "\6\0\7\36\4\0\7\36\1\125\6\36\1\126\4\36"+
    "\4\0\1\36\23\0\2\36\6\0\7\36\4\0\13\36"+
    "\1\127\7\36\4\0\1\36\23\0\2\36\6\0\7\36"+
    "\4\0\7\36\1\130\13\36\4\0\1\36\30\0\1\131"+
    "\45\0\6\63\1\132\34\63\1\133\32\63\12\64\1\132"+
    "\30\64\1\134\32\64\20\0\1\135\127\0\1\136\11\0"+
    "\1\137\4\0\1\140\1\0\1\141\23\0\1\142\77\0"+
    "\2\71\74\0\2\143\67\0\1\144\1\0\1\144\2\0"+
    "\2\71\107\0\1\145\75\0\1\75\62\0\2\146\6\0"+
    "\2\146\11\0\6\146\45\0\2\36\6\0\7\36\4\0"+
    "\3\36\1\147\17\36\4\0\1\36\23\0\2\36\6\0"+
    "\7\36\4\0\4\36\1\150\16\36\4\0\1\36\23\0"+
    "\2\36\6\0\7\36\4\0\17\36\1\151\3\36\4\0"+
    "\1\36\23\0\2\36\6\0\7\36\4\0\3\36\1\152"+
    "\17\36\4\0\1\36\23\0\2\36\6\0\7\36\4\0"+
    "\12\36\1\153\10\36\4\0\1\36\23\0\2\36\6\0"+
    "\7\36\4\0\16\36\1\154\4\36\4\0\1\36\23\0"+
    "\2\36\6\0\7\36\4\0\13\36\1\155\7\36\4\0"+
    "\1\36\23\0\2\36\6\0\7\36\4\0\2\36\1\156"+
    "\20\36\4\0\1\36\23\0\2\36\6\0\7\36\4\0"+
    "\12\36\1\157\10\36\4\0\1\36\23\0\2\36\6\0"+
    "\7\36\4\0\20\36\1\160\2\36\4\0\1\36\23\0"+
    "\2\36\6\0\7\36\4\0\15\36\1\161\2\36\1\162"+
    "\2\36\4\0\1\36\23\0\2\36\6\0\7\36\4\0"+
    "\4\36\1\163\16\36\4\0\1\36\23\0\2\36\6\0"+
    "\7\36\4\0\21\36\1\164\1\36\4\0\1\36\23\0"+
    "\2\36\6\0\7\36\4\0\20\36\1\165\2\36\4\0"+
    "\1\36\23\0\2\36\6\0\7\36\4\0\10\36\1\166"+
    "\12\36\4\0\1\36\1\63\1\0\1\63\1\0\71\63"+
    "\1\0\1\64\1\0\1\64\1\0\71\64\1\0\2\167"+
    "\1\0\1\167\1\0\13\167\1\170\55\167\61\0\1\171"+
    "\66\0\1\172\114\0\1\173\77\0\1\174\25\0\2\143"+
    "\7\0\1\74\15\0\1\74\44\0\1\175\1\0\2\146"+
    "\6\0\1\146\1\176\1\0\1\75\1\177\1\76\5\0"+
    "\4\146\1\176\1\146\7\0\1\177\35\0\2\36\6\0"+
    "\7\36\4\0\1\200\22\36\4\0\1\36\23\0\2\36"+
    "\6\0\7\36\4\0\4\36\1\201\16\36\4\0\1\36"+
    "\23\0\2\36\6\0\7\36\4\0\17\36\1\202\3\36"+
    "\4\0\1\36\23\0\2\36\6\0\7\36\4\0\2\36"+
    "\1\203\20\36\4\0\1\36\23\0\2\36\6\0\7\36"+
    "\4\0\1\204\22\36\4\0\1\36\23\0\2\36\6\0"+
    "\7\36\4\0\4\36\1\205\16\36\4\0\1\36\23\0"+
    "\2\36\6\0\7\36\4\0\21\36\1\206\1\36\4\0"+
    "\1\36\23\0\2\36\6\0\7\36\4\0\13\36\1\207"+
    "\7\36\4\0\1\36\23\0\2\36\6\0\7\36\4\0"+
    "\4\36\1\210\16\36\4\0\1\36\23\0\2\36\6\0"+
    "\7\36\4\0\10\36\1\211\12\36\4\0\1\36\23\0"+
    "\2\36\6\0\7\36\4\0\12\36\1\212\10\36\4\0"+
    "\1\36\2\167\1\0\1\167\1\0\71\167\2\170\1\213"+
    "\1\170\1\214\71\170\51\0\1\215\100\0\1\216\112\0"+
    "\1\217\77\0\1\220\25\0\2\221\6\0\2\221\11\0"+
    "\6\221\40\0\1\144\1\0\1\144\1\175\1\0\2\146"+
    "\6\0\1\146\1\176\1\0\1\75\1\177\1\76\5\0"+
    "\4\146\1\176\1\146\7\0\1\177\30\0\1\144\1\0"+
    "\1\144\100\0\2\36\6\0\7\36\4\0\11\36\1\222"+
    "\11\36\4\0\1\36\23\0\2\36\6\0\7\36\4\0"+
    "\10\36\1\223\12\36\4\0\1\36\23\0\2\36\6\0"+
    "\7\36\4\0\4\36\1\224\16\36\4\0\1\36\23\0"+
    "\2\36\6\0\7\36\4\0\20\36\1\225\2\36\4\0"+
    "\1\36\23\0\2\36\6\0\7\36\4\0\12\36\1\226"+
    "\10\36\4\0\1\36\23\0\2\36\6\0\7\36\4\0"+
    "\1\227\22\36\4\0\1\36\23\0\2\36\6\0\7\36"+
    "\4\0\16\36\1\230\4\36\4\0\1\36\23\0\2\36"+
    "\6\0\7\36\4\0\12\36\1\231\10\36\4\0\1\36"+
    "\23\0\2\36\6\0\7\36\4\0\4\36\1\232\16\36"+
    "\4\0\1\36\1\0\1\213\16\0\1\233\57\0\1\213"+
    "\157\0\1\234\67\0\1\235\17\0\2\217\1\0\1\217"+
    "\1\0\71\217\2\220\1\0\1\220\1\0\71\220\23\0"+
    "\2\221\6\0\1\221\1\236\2\0\1\177\6\0\4\221"+
    "\1\236\1\221\7\0\1\177\35\0\2\36\6\0\7\36"+
    "\4\0\5\36\1\237\15\36\4\0\1\36\23\0\2\36"+
    "\6\0\7\36\4\0\10\36\1\240\12\36\4\0\1\36"+
    "\23\0\2\36\6\0\7\36\4\0\20\36\1\241\2\36"+
    "\4\0\1\36\23\0\2\36\6\0\7\36\4\0\13\36"+
    "\1\242\7\36\4\0\1\36\20\0\1\243\127\0\1\244"+
    "\105\0\1\245\31\0\1\144\1\0\1\144\2\0\2\221"+
    "\6\0\1\221\1\236\2\0\1\177\6\0\4\221\1\236"+
    "\1\221\7\0\1\177\35\0\2\36\6\0\7\36\4\0"+
    "\14\36\1\246\6\36\4\0\1\36\20\0\1\170\131\0"+
    "\1\247\102\0\1\217\37\0\2\36\6\0\7\36\4\0"+
    "\13\36\1\250\7\36\4\0\1\36\56\0\1\251\101\0"+
    "\1\252\74\0\1\220\14\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7378];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\2\0\1\10\1\0\1\11\1\1\1\11"+
    "\1\1\10\11\6\1\1\11\3\1\1\11\1\1\3\11"+
    "\15\1\3\11\3\1\1\0\1\11\3\1\1\11\2\1"+
    "\3\0\6\11\23\1\2\11\2\0\1\1\4\0\1\11"+
    "\1\1\1\0\1\11\23\1\5\0\1\1\1\0\13\1"+
    "\4\0\14\1\3\0\5\1\3\0\1\1\1\0\1\1"+
    "\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public LuauLexer() {
    this((java.io.Reader)null);
  }

   private int nBrackets = 0;
      private boolean checkAhead(char c, int offset) {
          return this.zzMarkedPos + offset < this.zzBuffer.length() && this.zzBuffer.charAt(this.zzMarkedPos + offset) == c;
      }

      private boolean checkBlock() {
          nBrackets = 0;
          if (checkAhead('[', 0)) {
              int n = 0;
              while (checkAhead('=', n + 1)) n++;
              if (checkAhead('[', n + 1)) {
                  nBrackets = n;
                  return true;
              }
          }
          return false;
      }

      private boolean checkDocBlock() {
          return checkAhead('-', nBrackets + 2)
              && checkAhead('-', nBrackets + 3)
              && checkAhead('-', nBrackets + 4);
      }

      private int checkBlockEnd() {
          int pos = zzMarkedPos;
          int end = zzEndRead;
          while(pos < end) {
              char c = zzBuffer.charAt(pos);
              if (c == ']') {
                  pos++;
                  int size = 0;
                  while (pos < zzEndRead && zzBuffer.charAt(pos) == '=') {
                      size++;
                      pos++;
                  }
                  if (size == nBrackets && pos < zzEndRead && zzBuffer.charAt(pos) == ']') {
                      pos++;
                      break;
                  }
                  continue;
              }
              pos++;
          }
          return pos - zzMarkedPos;
      }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LuauLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(YYINITIAL); return SHEBANG_CONTENT;
            }
          // fall through
          case 70: break;
          case 2:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 71: break;
          case 3:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 72: break;
          case 4:
            { yybegin(xDOUBLE_QUOTED_STRING); yypushback(yylength());
            }
          // fall through
          case 73: break;
          case 5:
            { return GETN;
            }
          // fall through
          case 74: break;
          case 6:
            { return MOD;
            }
          // fall through
          case 75: break;
          case 7:
            { return BIT_AND;
            }
          // fall through
          case 76: break;
          case 8:
            { yybegin(xSINGLE_QUOTED_STRING); yypushback(yylength());
            }
          // fall through
          case 77: break;
          case 9:
            { return LPAREN;
            }
          // fall through
          case 78: break;
          case 10:
            { return RPAREN;
            }
          // fall through
          case 79: break;
          case 11:
            { return MULT;
            }
          // fall through
          case 80: break;
          case 12:
            { return PLUS;
            }
          // fall through
          case 81: break;
          case 13:
            { return COMMA;
            }
          // fall through
          case 82: break;
          case 14:
            { return MINUS;
            }
          // fall through
          case 83: break;
          case 15:
            { return DOT;
            }
          // fall through
          case 84: break;
          case 16:
            { return DIV;
            }
          // fall through
          case 85: break;
          case 17:
            { return NUMBER;
            }
          // fall through
          case 86: break;
          case 18:
            { return COLON;
            }
          // fall through
          case 87: break;
          case 19:
            { return SEMI;
            }
          // fall through
          case 88: break;
          case 20:
            { return LT;
            }
          // fall through
          case 89: break;
          case 21:
            { return ASSIGN;
            }
          // fall through
          case 90: break;
          case 22:
            { return GT;
            }
          // fall through
          case 91: break;
          case 23:
            { return QUESTION;
            }
          // fall through
          case 92: break;
          case 24:
            { return ID;
            }
          // fall through
          case 93: break;
          case 25:
            { if (checkAhead('=', 0) || checkAhead('[', 0)) {
             yypushback(yylength());
             checkBlock();
             zzMarkedPos += checkBlockEnd();
             return STRING;
         } else {
             return LBRACK;
         }
            }
          // fall through
          case 94: break;
          case 26:
            { return RBRACK;
            }
          // fall through
          case 95: break;
          case 27:
            { return EXP;
            }
          // fall through
          case 96: break;
          case 28:
            { return LCURLY;
            }
          // fall through
          case 97: break;
          case 29:
            { return BIT_OR;
            }
          // fall through
          case 98: break;
          case 30:
            { return RCURLY;
            }
          // fall through
          case 99: break;
          case 31:
            { return BIT_TILDE;
            }
          // fall through
          case 100: break;
          case 32:
            { yybegin(YYINITIAL); return STRING;
            }
          // fall through
          case 101: break;
          case 33:
            { yybegin(xSHEBANG); return SHEBANG;
            }
          // fall through
          case 102: break;
          case 34:
            { boolean block = checkBlock();
              if (block) {
                  boolean docBlock = checkDocBlock();
                  yypushback(yylength());
                  zzMarkedPos += checkBlockEnd();
                  return docBlock ? DOC_BLOCK_COMMENT : BLOCK_COMMENT;
              }
              else { yypushback(yylength()); yybegin(xCOMMENT); }
            }
          // fall through
          case 103: break;
          case 35:
            { return CONCAT;
            }
          // fall through
          case 104: break;
          case 36:
            { return DOUBLE_DIV;
            }
          // fall through
          case 105: break;
          case 37:
            { return DOUBLE_COLON;
            }
          // fall through
          case 106: break;
          case 38:
            { return BIT_LTLT;
            }
          // fall through
          case 107: break;
          case 39:
            { return LE;
            }
          // fall through
          case 108: break;
          case 40:
            { return EQ;
            }
          // fall through
          case 109: break;
          case 41:
            { return GE;
            }
          // fall through
          case 110: break;
          case 42:
            { return BIT_RTRT;
            }
          // fall through
          case 111: break;
          case 43:
            { return DO;
            }
          // fall through
          case 112: break;
          case 44:
            { return IF;
            }
          // fall through
          case 113: break;
          case 45:
            { return IN;
            }
          // fall through
          case 114: break;
          case 46:
            { return OR;
            }
          // fall through
          case 115: break;
          case 47:
            { return NE;
            }
          // fall through
          case 116: break;
          case 48:
            { yybegin(YYINITIAL);return SHORT_COMMENT;
            }
          // fall through
          case 117: break;
          case 49:
            { return ELLIPSIS;
            }
          // fall through
          case 118: break;
          case 50:
            { return AND;
            }
          // fall through
          case 119: break;
          case 51:
            { return END;
            }
          // fall through
          case 120: break;
          case 52:
            { return FOR;
            }
          // fall through
          case 121: break;
          case 53:
            { return NIL;
            }
          // fall through
          case 122: break;
          case 54:
            { return NOT;
            }
          // fall through
          case 123: break;
          case 55:
            { yybegin(YYINITIAL);return DOC_COMMENT;
            }
          // fall through
          case 124: break;
          case 56:
            { return ELSE;
            }
          // fall through
          case 125: break;
          case 57:
            { return THEN;
            }
          // fall through
          case 126: break;
          case 58:
            { return TRUE;
            }
          // fall through
          case 127: break;
          case 59:
            { return REGION;
            }
          // fall through
          case 128: break;
          case 60:
            { return ENDREGION;
            }
          // fall through
          case 129: break;
          case 61:
            { return BREAK;
            }
          // fall through
          case 130: break;
          case 62:
            { return FALSE;
            }
          // fall through
          case 131: break;
          case 63:
            { return LOCAL;
            }
          // fall through
          case 132: break;
          case 64:
            { return UNTIL;
            }
          // fall through
          case 133: break;
          case 65:
            { return WHILE;
            }
          // fall through
          case 134: break;
          case 66:
            { return ELSEIF;
            }
          // fall through
          case 135: break;
          case 67:
            { return REPEAT;
            }
          // fall through
          case 136: break;
          case 68:
            { return RETURN;
            }
          // fall through
          case 137: break;
          case 69:
            { return FUNCTION;
            }
          // fall through
          case 138: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
