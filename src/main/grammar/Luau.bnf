{
  parserClass="com.github.aleksandrsl.intellijluau.parser.LuauParser"
  parserUtilClass="com.github.aleksandrsl.intellijluau.parser.LuauParserUtilBase"

  implements='com.github.aleksandrsl.intellijluau.psi.LuauElement'
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Luau"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.aleksandrsl.intellijluau.psi"
  psiImplPackage="com.github.aleksandrsl.intellijluau.psi.impl"
  psiImplUtilClass="com.github.aleksandrsl.intellijluau.psi.LuauPsiImplUtilKt"

  elementTypeHolderClass="com.github.aleksandrsl.intellijluau.psi.LuauTypes"
  elementTypeClass="com.github.aleksandrsl.intellijluau.psi.LuauElementType"
  tokenTypeClass="com.github.aleksandrsl.intellijluau.psi.LuauTokenType"

  tokens = [
    space = "regexp:\s+"
    AND = "and"
    BREAK = "break"
    DO = "do"
    ELSE = "else"
    ELSEIF = "elseif"
    END = "end"
    FALSE = "false"
    FOR = "for"
    FUNCTION = "function"
    IF = "if"
    IN = "in"
    LOCAL = "local"
    NIL = "nil"
    NOT = "not"
    OR = "or"
    REPEAT = "repeat"
    RETURN = "return"
    THEN = "then"
    TRUE = "true"
    UNTIL = "until"
    WHILE = "while"
    REGION = "REGION"
    ENDREGION = "ENDREGION"

    SHEBANG = "#!"
    SHEBANG_CONTENT = "SHEBANG_CONTENT"
    ELLIPSIS = "..."
    CONCAT = ".."
    EQ = "=="
    GE = ">="
    LE = "<="
    NE = "~="
    MINUS = "-"
    PLUS = "+"
    MULT = "*"
    MOD = "%"
    DIV = "/"
    ASSIGN = "="
    GT = ">"
    LT = "<"
    AT = "@"
    LPAREN = "("
    RPAREN = ")"
    LBRACK = "["
    RBRACK = "]"
    LCURLY = "{"
    RCURLY = "}"
    GETN = "#"
    COMMA = ","
    SEMI = ";"
    COLON = ":"
    DOT = "."
    EXP = "^"
    QUESTION = "?"
    DOUBLE_COLON = "::"
    DOUBLE_DIV = "//"

    PLUS_EQ = "+="
    MINUS_EQ = "-="
    MULT_EQ = "*="
    DIV_EQ = "/="
    DOUBLE_DIV_EQ = "//="
    MOD_EQ = "%="
    EXP_EQ = "^="
    CONCAT_EQ = "..="
    ARROW = "->"
    UNION = "|"
    INTERSECTION = "&"

    SHORT_COMMENT="SHORT_COMMENT"
    DOC_BLOCK_COMMENT="DOC_BLOCK_COMMENT"
    DOC_COMMENT="DOC_COMMENT"
    BLOCK_COMMENT="BLOCK_COMMENT"
    ID="regexp:[A-Za-z_][A-Za-z0-9_]*"
    NUMBER="regexp:[0-9]+"
    STRING = "regexp:\"\S*\""
  ]

  // Inspired by Rust. Recover statements with fast consume don't affect error messages anyway
  // and expression with fast consume is a standard practice
  consumeTokenMethod("((?!.*_with_recover).*_recover)|.*_first|.*_expr|expression")="consumeTokenFast"
  extends(".*expr")=expression
  // I added this because I wanted to stop resolving generics when I hit the statement,
  // but then realized that they can be function scoped so I can't simply do that
  // Let this exist for a while maybe I find another application.
  implements(".*_statement")="com.github.aleksandrsl.intellijluau.psi.LuauStatement"
  // TODO (AleksandrSl 24/03/2025): Check soft keywords in Haxe token sets, maybe I don't need an interface?
  // In rust plugin the remap tokens based on the context with a manual parsing rule. I don't know what are the benefits to my approach though.
  implements(".*soft_keyword") = "com.github.aleksandrsl.intellijluau.psi.LuauSoftKeyword"
  // I guess element type is not necessary here, but it reduced the amount of types generated
  elementType(".*_op")=operator
  extends(".*_op")=operator
}
/**
 * Important bits of info:
 *  - https://github.com/JetBrains/Grammar-Kit/issues/271 error recovery is done even if there is no error.
 */

// Why do I use postfix and not suffix. It's prevalent in many grammars, not other reasons.

luau_file ::= shebang_line? root_block
shebang_line ::= SHEBANG SHEBANG_CONTENT

// meta rules improve readability, save 200 lines of code, don't add more overhead, at least they generate the same 2 methods that were generated everywhere
private meta list ::= <<p>> (',' <<p>>)*
// element_list ::= '(' element (',' (element | &')'))* ')' {pin(".*")=1} is this example from the docs better?
private meta list_with_trailing_comma ::= <<p>> (',' <<p>>)* ','?

// TODO (AleksandrSl 10/03/2025): Maybe I can just create a token set with all of them
fake operator ::=

// It's not mandatory to have the different rules for blocks, but the root one can be simpler
private root_statement_with_recover ::= !('return' | <<eof>>) statement { pin = 1 recoverWhile = statement_recover }
root_block ::= (root_statement_with_recover ';'?)* (return_statement ';'?)? { mixin="com.github.aleksandrsl.intellijluau.psi.LuauBlockImplMixin" }

/* TODO (AleksandrSl 26/03/2025):
 *  I don't know how bad 5 element lookahead is, it's good that they all are just one token.
 *  Consider doing just `statement_with_recover`* and manually checking that last statement is last.
 *  This will simplify the lookahead to !('end' | <<eof>>)
 *  One more fix here, is to have all the tokens that may end the block here. And in my case it's also else and elseif and until.
 *  Probably I can split this into more granular rules if such a long lookahead is a performance problem
 */
private statement_with_recover ::= !('end' | 'return' | continue_soft_keyword | 'break' | 'else' | 'elseif' | 'until' | <<eof>>) statement { pin = 1 recoverWhile = statement_recover }
block ::= (statement_with_recover ';'?)* (last_statement ';'?)? { mixin="com.github.aleksandrsl.intellijluau.psi.LuauBlockImplMixin" }

private statement ::=
     type_function_declaration_statement
     | type_declaration_statement
     | do_statement
     | while_statement
     | repeat_statement
     | if_statement
     | classic_for_statement
     | foreach_statement
     | def_statement
     | compound_op_statement
     | assignment_statement
     | expression_statement
{ name = "statement" }

private statement_recover ::= !(
   statement_first | ';' | 'end' | 'until' | 'elseif' | 'else' | last_statement_first
)

// It's funny that rust don't allow let as the top level statement, we do though, so local is here.
private statement_first ::= 'local' | 'do' | 'while' | 'repeat' | 'function' | 'if' | 'for' | export_soft_keyword | type_soft_keyword | ID | '(' | '@'
private last_statement_first ::= 'return' | 'break' | continue_soft_keyword

// TODO (AleksandrSl 26/03/2025): What is the lazy parsing thing?
//  private ShallowBlock ::= <<parseCodeBlockLazy>>
//  I see a lot of it in other plugins.

do_statement ::= 'do' block 'end' { pin = 1 }
while_statement ::= 'while' expression 'do' block 'end' { pin = 1 }
repeat_statement ::= 'repeat' block 'until' expression { pin = 1 }
if_statement ::= 'if' expression 'then' block ('elseif' expression 'then' block)* ('else' block)? 'end' { pin = 1 }
// TODO (AleksandrSl 22/04/2025): Should I consider binding '=' expression in general as a separate node to be able to get the value easier for type inference?
// Yes, we can only have one variable here, and yes we can type it: `for i: number=10,1,-1 do print(i) end`
classic_for_statement ::= 'for' binding '=' expression ',' expression (',' expression)? 'do' block 'end' { pin = 3 }
// Rename for into numeric_for and generic_for as in lua docs
foreach_statement ::= 'for' binding_list 'in' exp_list 'do' block 'end' { pin = 1 }
assignment_statement ::= var_list '=' exp_list { pin = 2 }
compound_op_statement ::= lvalue compound_op expression { pin = 2 }
// Alternative here is to use `external my_external_rule ::= parseMyExternalRule false 10`
expression_statement ::= <<parseExprStatement index_or_call_expr>>
private def_statement ::= local_func_def_statement | method_def_statement | func_def_statement | local_def_statement
private return_statement ::= 'return' exp_list? { pin = 1 }
// Though break and continue can only be inside the cycle, I can't create a separate cycle_block.
// Since many things can be nested inside the cycle. Though functions for example cannot have continue
// even if they are inside the while. I don't think it's worth trying to check this on parser level.
last_statement ::= return_statement | 'break' | continue_soft_keyword
// How does pin work with the optional elements? It just pins true, since parse function for ? always returns true
// TODO (AleksandrSl 04/04/2025): Contribute inspection to not pin optional attributes? But maybe people do this on purpose?
// TODO (AleksandrSl 04/04/2025): This one is the NamedElement as well. They do a clever thing in dart, every identifier is wrapped into a component rule.
//  So the can easily query the id the same way
//  I wonder what the id for the method should be. Is it just method? or the parent matters as well.
//  As far as I understand here
//  referenceExpression ::= << nonStrictID >>
//  {mixin="com.jetbrains.lang.dart.psi.impl.DartReferenceImpl" implements="com.jetbrains.lang.dart.psi.DartReference"}
//  Every reference in the reference.


// TODO (AleksandrSl 05/04/2025): Dart implements `this` rule. I can do the same for self
//  thisExpression ::= 'this'
//  {mixin="com.jetbrains.lang.dart.psi.impl.DartReferenceImpl" implements="com.jetbrains.lang.dart.psi.DartReference"}

type_function_declaration_statement ::= export_soft_keyword? type_soft_keyword 'function' ID func_body {
  pin = 3
  extends="com.github.aleksandrsl.intellijluau.psi.LuauNamedElementImpl"
  implements=["com.github.aleksandrsl.intellijluau.psi.LuauNamedElement"]
}
type_declaration_statement ::= export_soft_keyword? type_soft_keyword ID ('<' generic_type_list_with_defaults '>')? '=' type {
  pin = 2;
  extends="com.github.aleksandrsl.intellijluau.psi.LuauNamedElementImpl"
  implements=["com.github.aleksandrsl.intellijluau.psi.LuauNamedElement" "com.github.aleksandrsl.intellijluau.psi.LuauGenericDeclaration"]
  methods=[getDeclaredGenerics]
}
export_soft_keyword ::= 'export'
continue_soft_keyword ::= 'continue'
type_soft_keyword ::= 'type'
typeof_soft_keyword ::= 'typeof'

/* Attributes */
// See https://github.com/luau-lang/rfcs/blob/master/docs/syntax-attribute-functions-deprecated.md for the example of parametrized attributes
// They are a bit in the future, but no one will die if I support the syntax now
literal_table ::= '{' literal_field_list? '}' { pin = 1 }
private literal_field_list ::= <<list_with_trailing_comma literal_field>>
literal_field ::= (ID '=')? literal

private literal ::= NUMBER | STRING | 'nil' | 'true' | 'false' | literal_table { name = "literal" }

// I tried a lot of variants of error recovery here, and I don't like neither of them,
// but the current one at least recovers what I want giving the less stupid error.
// Though it's stupid anyway, but I don't want to spend time here now.
// The balance is between the least complex recovery rule, so it recovers a good deal of incorrect code and doesn't just stop at the next token
// and the least amount errors at the same, it can just rollback the whole least and find error in a weird place,
// because it started parsing from the ID in a table for example.
// NB: If you pin on the ',' it will show no error, though there should be one
// NB2: If you pin on the !')' | &')' then the whole last item goes into waste even if it's correct. Same if you pin on pin = 2
private parenthesised_parameter_item ::= literal (',' !')' | &')') { pin = 1 }
private parenthesised_parameter_with_recovery ::= parenthesised_parameter_item* { recoverWhile = parenthesised_parameter_recovery }
private parenthesised_parameter_recovery ::= !( ')' | ']' | statement_first)
private parenthesised_parameters ::= '(' parenthesised_parameter_with_recovery ')' { pin = 1 }

parameters ::= parenthesised_parameters | literal_table | STRING
parametrized_attribute ::= ID parameters? (',' !']' | &']') { pin = 1; recoverWhile = parametrized_attribute_recover }
private parametrized_attribute_recover ::= !(']' | statement_first)
attribute ::= '@' (ID | '[' parametrized_attribute* ']') { pin = 1; recoverWhile = attribute_recover }
attributes ::= attribute+
private attribute_recover ::= !(statement_first | exp_first )

/* Attributes End */

// TODO (AleksandrSl 05/04/2025): Do I need to somehow propagate "locality" to the binding that create the variable?
//  In lua the do declare this as a scope and declaration, but named element is onlt the ID itself
local_def_statement ::= 'local' binding_list ('=' exp_list)? { pin = 1 }
func_def_statement ::= attributes? 'function' ID func_body {
  pin = 2
  methods=[getPresentation]
  extends="com.github.aleksandrsl.intellijluau.psi.LuauNamedElementImpl"
  implements="com.github.aleksandrsl.intellijluau.psi.LuauNamedElement"
}

// Without pinning somehow it won't match the function but local_def_statement instead even though it is later in the variants.
// Looks like parser first searches for pins if there are any in the rules.

// Rule also scans until it encounters recoverWhile symbol and then tries something else for unknown reason.
// There no errors what are you recovering from?
// Moreover, it safely parses name of the function (it's also an ID) and then stops inside the generic_type_list, what the actual fuck is this?
// Ok, it actually fails to parse conditions and assignments inside the body, so it actually fails to parse function and starts doing this shit.
// I broke somethings with pinning

// Even if the code is perfectly normal.
// 'function' is pinned because pinning local won't allow to match variable definitions
local_func_def_statement ::= attributes? 'local' 'function' ID func_body {
  pin = 3
  methods=[getPresentation processDeclarations]
  extends="com.github.aleksandrsl.intellijluau.psi.LuauNamedElementImpl"
  implements="com.github.aleksandrsl.intellijluau.psi.LuauNamedElement"
}

// TODO (AleksandrSl 22/04/2025): Fix the fact that the first ID probably considered the name, but it should be the last one
method_def_statement ::= attributes? 'function' method_name func_body {
  pin = 3;
  methods=[getPresentation];
  extends="com.github.aleksandrsl.intellijluau.psi.LuauNamedElementImpl"
  implements="com.github.aleksandrsl.intellijluau.psi.LuauNamedElement"
}

// ('.' ID)* (':' ID | '.' ID) won't work since parser is greedy.
method_name ::= simple_reference ('.' simple_reference &('.' | ':'))* (':' ID | '.' ID)
func_body ::= func_type_params? par_list (':' return_type)? block 'end' {
  pin = 2;
  implements=["com.github.aleksandrsl.intellijluau.psi.LuauGenericDeclaration"]
  methods=[getDeclaredGenerics]
}
// binding_list is not used here on purpose to flatter the parameters into one list for better formatting and less PSI
par_list ::= '(' (<<list binding>> (',' type_pack_parameter)? | type_pack_parameter)? ')'
private type_pack_parameter ::= '...' (':' (generic_type_pack | type))?

exp_list ::= <<list expression>> { name = "expression list" }

// TODO (AleksandrSl 04/04/2025): Here we reference a type, so we should use the type with references mixin
// Needed for assignments with local. You shouldn't be able to use `local a.b.c = 10`
binding ::= ID (':' type)?  {
  // No idea why they use mixins or methods instead of extend, probably because they need more than one implementation
  // But usually it's not the case.
  extends="com.github.aleksandrsl.intellijluau.psi.LuauNamedElementImpl"
  implements="com.github.aleksandrsl.intellijluau.psi.LuauNamedElement"
  methods=[getPresentation getTy]
}

// equivalent of Lua 5.1 'namelist', except with optional type annotations
binding_list ::= <<list binding>>

var_list ::= <<list lvalue>>
lvalue ::= <<parseLvalue index_or_call_expr>>

simple_reference ::= ID { mixin="com.github.aleksandrsl.intellijluau.psi.LuauSimpleReferenceImplMixin" }

private index_or_call_expr ::= (simple_reference | paren_expr) (index_access | func_call)*
// TODO (AleksandrSl 05/04/2025): Array access can be a reference as well? I have a feeling that I saw it somewhere in another plugin
// These are postfixes. not actual access and call, but since they are left and take over the index_or_call_expr above the names suit well
left index_access ::= '[' expression ']' | '.' simple_reference { pin(".*") = 1 }
// I can't pin method call because tables have : as well.
// Nope, I can because it's only in types.
//
// Which version is better optional or union?
// I guess it depends on which type of call is prevalent.
// With optional ':' we first try to match it and if it fails match the args
// With union I try args first. Since they are more prevalent.
// One more downside of optional is that you can't pin the `:` you can pin only the whole
// (':' simple_reference)? which literally pins empty space.
// I did a quick comparison, and it's quite obvious on a file with ~ 10000 method calls with : optional version is faster.
// if the calls are . then union is faster. But it's hard to use these results since in the . case we have more calls to index_access.
// Anyway the difference is not visible on normal files. Can be a subject for later investigation.
left func_call ::= func_args | ':' simple_reference func_args { pin(".*") = 1 }

func_args ::= list_args | single_arg
// Well, shit, sugar we deserved
// > A call of the form f{fields} is syntactic sugar for f({fields});
//   that is, the argument list is a single new table.
//   A call of the form f'string' (or f"string" or f[[string]]) is syntactic sugar for f('string');
//   that is, the argument list is a single literal string
// Only STRING is allowed, not template_string
single_arg ::= table_constructor | STRING { extends = func_args }
// Rust does this a bit differently adding ',' to the arg_with_recover and doing arg_with_recover* and then they do no need ',' in recovery.
// I like my meta rules though. Unless I found this is a performance issue I'll stick to this.
// -- One moment later.
// Damn, no, in this case if I add a comma after the last argument, parser finishes arg_with_recover list rule eats , and then when trying to parse expression again it fails immediately because of !')'.
// I have a feeling though that (!')' | &',') but it says that it matches empty input. And indeed ',' should be lookbehind, which doesn't exist.
// The error `')' unexpected` is a bit weird, but I don't see how I can do better, but keep the error recovery good
list_args ::= '(' arg_with_recover* ')' { extends = func_args; pin = 1 }
// Every rule tries to match as it can. Once it encounters error, it will continue until the recover is fine.
// So the correct recover should stop at the start of the symbol which may indicate the beginning of
// the new element of the same type, on an end of the parent expression
private arg_with_recover ::= !')' expression (',' !')' | &')') { pin = 1 recoverWhile = arg_recover }
// I added TEMPLATE_STRING_EQUOTE to the recoveries to improve cases when the function call is not finished in template string, but that's minor and can be drop if there will be downsides.
private arg_recover ::= !(exp_first | ')' | 'end' | '}' | statement_first | last_statement_first | ';' | TEMPLATE_STRING_EQUOTE)

// See this https://github.com/JetBrains/Grammar-Kit/blob/master/HOWTO.md#24-compact-expression-parsing-with-priorities for extends example. In this case Parser switches to a different algo (Pratt) so it's ok to have left-recursion
// TODO (AleksandrSl 07/03/2025): Figure out priorities later
// 2.5.6 – Precedence Take a look at this
expression ::= ifelse_expr
  | or_expr
  | and_expr
  | comparison_expr
  | add_group
  | mul_group
  | unary_group
  | exp_expr
  | primary_group_expr
//  Why do I need this? I just found this in the example
  { extraRoot = true name = "expression" }

private exp_first ::= '{' | '(' | 'true' | 'false' | ID | STRING | NUMBER | '#' | 'if' | '-' | 'not' | 'function' | 'nil' | '...' | '@' | TEMPLATE_STRING_SQUOTE

// private rules to define operators with the same priority
private unary_group ::= length_expr | not_expr | unary_min_expr
private mul_group ::= mul_expr | div_expr | floor_div_expr | mod_expr | concat_expr
private add_group ::= plus_expr | minus_expr

/*
 * Original grammar from lua
 * simpleexp ::= NUMBER | STRING | 'nil' | 'true' | 'false' | '...' | tableconstructor | attributes 'function' funcbody | prefixexp | ifelseexp | stringinterp
 * asexp ::= simpleexp ['::' Type]
 * exp:= asexp { binop exp } | unop exp { binop exp }
 * I did it the way that I try an as_exp first and a normal one
 *  | as_expr
 *  | primary_group
 * I should have known that this is highly ineffective, because we literally parse the same thing twice.
 * Because
 * as_expr ::= (ifelse_expr | table_constructor_expr | literal_expr | closure_expr | template_string_expr | value_expr) '::' type { pin = 2 }
 * private primary_group ::= table_constructor_expr | literal_expr | closure_expr | template_string_expr | value_expr
 * It's literally the same, except for if else, because I consider it a less prioritized expressions so it's in the top separately (I'm not sure I'm correct)
 * I think the better way should be to add cast as an left rule, so it will be optional and eat the parent if needed.
 *
 * Btw, ifelseexp doesn't make sense in a simpleexp, since it's not simple. You can add a cast after it but it's attributed to the last expression not to if else statement.
 *
 */

// private primary_group ::= (table_constructor_expr | literal_expr | closure_expr | template_string_expr | value_expr) as_expr?
// Looks like this one doesn't work as I expect. I expect it to parse all the expressions and add as_expr part to the end.
// But it does
// if (!r) r = value_expr(b, l + 1);
// if (!r) r = as_expr(b, l + 1);
// So as_expr is parse only if the previous ones are not parsed
// I tried a lot of combinations. The idea is to wrap all these into a cast if it's there. But if the primary_group stays private
// it doesn't work like this and instead tries to parse cast as one more union option. (most probably it's a bug)
// If you make primary_group_expr non private (and you have to make it an expr then) then everything is good.
// I tried making as_expr both upper and left, and they work the same.
// primary_group_expr basically doesn't exist in the PSI
left as_expr ::= '::' type { pin = 1 }
// It's impossible to call a function or index a value except for ID and parenthesised expression.
// That's why the first 4 are not considered a value here. Naming sucks
primary_group_expr ::= (table_constructor_expr | literal_expr | closure_expr | template_string_expr | index_or_call_expr) as_expr?
unary_min_expr ::= un_minus_op expression
length_expr ::= un_length_op expression
not_expr ::= un_not_op expression
div_expr ::= expression div_op expression
floor_div_expr ::= expression floor_div_op expression
mod_expr ::= expression mod_op expression
concat_expr ::= expression concat_op expression
mul_expr ::= expression mul_op expression
minus_expr ::= expression minus_op expression
plus_expr ::= expression plus_op expression

div_op ::= '/'
floor_div_op ::= '//'
mod_op ::= '%'
concat_op ::= '..'
mul_op ::= '*'
minus_op ::= '-'
plus_op ::= '+'
comparison_op ::= '<' | '<=' | '>' | '>=' | '==' | '~='
and_op ::= 'and'
or_op ::= 'or'

comparison_expr ::= expression comparison_op expression { pin = 2 }
and_expr ::= expression and_op expression
or_expr ::= expression or_op expression
exp_expr ::= expression ('^' expression) + // N-ary variant, the "(<op> expr ) +" syntax is mandatory.
paren_expr ::= '(' expression ')'

literal_expr ::= NUMBER | STRING | 'nil' | 'true' | 'false' | '...'
closure_expr ::= attributes? 'function' func_body { pin = 2 }
private template_string_internals ::= (STRING | '{' expression '}')* { recoverWhile = template_string_internals_recover pin(".*")=1 }
private template_string_internals_recover ::= !(TEMPLATE_STRING_EQUOTE | statement_first | last_statement_first)
template_string_expr ::= TEMPLATE_STRING_SQUOTE template_string_internals TEMPLATE_STRING_EQUOTE { pin = 1 }
ifelse_expr ::= 'if' expression 'then' expression ('elseif' expression 'then' expression)* 'else' expression { pin = 1 }
table_constructor_expr ::= table_constructor

compound_op ::= '+=' | '-=' | '*=' | '/=' | '%=' | '^=' | '..=' | '//='
un_minus_op ::= '-'
un_not_op ::= 'not'
un_length_op ::= '#'

/* I see this in Haxe
    // Do NOT genericize objectLiteral by making objectLiteralElementList optional.  Doing so
    // makes blockStatement be overridden by objectLiteral in return statements.
   Does it make sense for me as well?
*/
table_constructor ::= '{' field_with_recover* '}' { pin = 1 }
private field_with_recover ::= !'}' field (field_sep | &'}') { recoverWhile = field_recover; pin = 1 }
field ::= keyed_field | string_keyed_field | indexed_field
// Added for the nice scope selection in the first place
computed_key ::= '[' expression ']' { pin = 1 }
keyed_field ::= computed_key '=' expression { pin = 1; }
string_keyed_field ::= ID '=' expression { pin = 2; }
indexed_field ::= expression
private field_recover ::= !('}' | '[' | exp_first | statement_first | 'end' | last_statement_first)
// Why the hell they allow two separators
private field_sep ::= ',' | ';'

// ----------------------- Type Rules -----------------------
// TODO (AleksandrSl 29/03/2025): Check priorities here. type T6 = A<(string, ...() -> (string, string) | nil)> should it be variadic of union or function with a union result?
private simple_type ::=
    singleton_type
    | typeof_type
    | type_reference
    | function_type
    | parenthesised_type
    | table_type

// TODO (AleksandrSl 06/04/2025): I started to question my references setup in general. Have to doublecheck it.
//  Why did I went with ReferenceProvidersRegistry and can the ScopeProcessor help me.
// To allow different resolutions. Is there a better way?
simple_type_reference ::= ID { methods=[getReference] }

// Types cannot be nested, at best they can be exported from a module so the first ID is module and the second is Type.
// I wonder what if you required a module but then put it into another module. You can't use the nested version in types?
// This is not exactly reference, because it can be a new type as well :think:
type_reference ::= (simple_type_reference !('.') | simple_reference '.' simple_type_reference) ('<' type_params? '>')?
// I need to reorder them, or add a common type to avoid reparsing, which will be weird cause they are unrelated
parenthesised_type ::= '(' type ')'
//left upper function_type_suffix ::= '->' return_type
typeof_type ::= typeof_soft_keyword '(' expression ')'
// I'm surprised that in TS they somehow made all the any/unknown keywords on the lexer level (at least they don't look like PSI tokens)
// nil is not included into singleton in the upstream grammar but it's handy for me
singleton_type ::= STRING | 'true' | 'false' | 'nil'
generic_type_pack ::= ID '...'
variadic_type_pack ::= '...' type { pin = 1 }
type_pack ::= '(' type_list? ')'
type_list ::= <<list type>> (',' variadic_type_pack)? | variadic_type_pack

/* The order of types here is fragile, and I'm not 100% sure the finally correct one.
 * If you put type first it boggles the generic type packs by parsing the Type first without ...
 * If you put type last it won't parse the function, because type_pack will go first and then -> is a garbage
 * Another solution to resolve both of these problems would be to use negative lookahead and don't parse the type with ... ahead or
 * type_pack with -> ahead. But I believe it's a bit worse for performance than just the order. Let's see how far we can go.
 *
 * Overall I think that relations and possible order of real usages are to hard to explain in grammar. So most of the errors go level above, as TypeError
 *
 * I believe there is an error in the grammar again. Or maybe not, looks like it's done as a TypeError in the LSP.
 */
type_params ::= <<list type_params_item>>
private type_params_item ::= variadic_type_pack | generic_type_pack | type | type_pack

// [06/05/2024] Why ? is used in UnionSuffix only, is it not possible to use with &?
// [04/03/2025] Because ? is a union and union and intersection cannot be mixed without parenthesis

// Well, to avoid reparsing of simply type and to nest unions/intersections I had to write this.
type ::=
  // Leading & and | are handled by the last two rules. We can't have intersection after '?'
  // so it's included into a separate optional union branch.
  simple_type ('?' union_type* | union_type+ | intersection_type+)?
  | union_type+
  | intersection_type+
  { implements = "LuauTypeElement" methods=[getTextPresentation] }

// left makes the rule recursive plus leaves the leading | and & out of the rule.
// Upper replaces the root most type, includes the leading token but doesn't nest anything 😭
// left with not private part is a bit better, but creates more PSI nodes that I want.
// After checking how types are done in TS I decided that if they don't need the nesting I don't need too.
// So upper should work just fine, it also doesn't have weird marker problems as left does
// See https://github.com/JetBrains/Grammar-Kit/issues/396
upper union_type ::= '|' simple_type '?'? { recoverWhile = type_recover; pin = 1 }
upper intersection_type ::= '&' simple_type { recoverWhile = type_recover; pin = 1 }

// I'm a bit surprise I need so many values here, but types can be found in a lot of contexts indeed
// Can consider bailing out on recover here, too much checks for little gain?
// I also still don't understand why it tries to match the rule even if it is already successfully parsed?
// Rust has recover mostly on the things wrapped into some parenthesis. They don't have any algebraic types in the language
private type_recover ::= !(')' | '}' | ',' | ';' | '>' | ']' | "=" | type_first | statement_first | last_statement_first | 'end')

// '<' is for the function type start
private type_first ::= ID | '(' | '|' | '&' | 'nil' | STRING | 'true' | 'false' | typeof_soft_keyword | '<'

// Yes it looks like generic_type_pack, but maybe it's needed for something in the original grammar? Let's keep it
generic_type_pack_parameter ::= ID '...' { extends=base_generic_type_declaration }
generic_type_pack_parameter_with_default ::= ID '...' '=' (type_pack | variadic_type_pack | generic_type_pack) { pin = 3; extends=base_generic_type_declaration }

func_type_params ::= '<' generic_type_list '>' { pin = 1 }

generic_type_list ::= (<<list (generic_type_declaration !'...')>> (',' | &'>'))? <<list generic_type_pack_parameter>>?

fake base_generic_type_declaration ::= ID ('=' type)? {
  extends="com.github.aleksandrsl.intellijluau.psi.LuauNamedElementImpl"; implements="com.github.aleksandrsl.intellijluau.psi.LuauNamedElement"
  name=generic_type_declaration
}

generic_type_declaration ::= ID { extends=base_generic_type_declaration }
generic_type_with_default_declaration ::= ID '=' type { extends=base_generic_type_declaration }

// Once the defaults stared we can't have anything other than default, plus generic type packs go after the normal types
generic_type_list_with_defaults ::=
    (<<list (generic_type_declaration !('=' | '...'))>> (',' | &'>'))?
    (<<list generic_type_with_default_declaration>> (',' | &'>') (<<list generic_type_pack_parameter_with_default>> (',' | &'>'))?
    | (<<list (generic_type_pack_parameter !'=')>> (',' | &'>'))? (<<list generic_type_pack_parameter_with_default>> (',' | &'>'))?)

// This ID also looks like a name identifier creation, but it's not used anywhere, maybe only for the documentation, but I guess I can use a different interface for this
// I could drop the first two branches, but then I need to make list optional and add a (',' | &'>') as in the generic_type_list_with_defaults. I don't think it's better so I left it as is.
bound_type_list ::= variadic_type_pack | generic_type_pack | <<list ((ID ':')? type !'...')>> (',' (variadic_type_pack | generic_type_pack))? { recoverWhile = bound_type_list_recover }
private bound_type_list_recover ::= !(')')
// Don't change order, see type_params
return_type ::= variadic_type_pack | generic_type_pack | type | type_pack

read_soft_keyword ::= 'read'
write_soft_keyword ::= 'write'

type_computed_key ::= '[' type ']' { pin = 1 }
type_keyed_field ::= type_computed_key ':' type { pin = 1 }
type_string_keyed_field ::= ID ':' type { pin = 1 }
// lookahead is required to correctly parse `type D = {read: () -> string}`
type_field ::= ((read_soft_keyword | write_soft_keyword) !':')? (type_string_keyed_field | type_keyed_field)

private table_type_field_with_recover ::= !'}' type_field (field_sep | &'}') { recoverWhile = table_type_field_recover; pin = 1 }
// First branch is array type, second branch is table and empty table
// If I add just a type in the first branch, then recovery is not working since we parse the type and error without any recovery,
// is there a better way than just & '}'? Maybe it's better to add recovery to the single item, but I don't know how
table_type ::= '{' (type &'}' | table_type_field_with_recover*) '}' { pin = 1 }
// I tried to use the same rule as for the table but it doesn't work because we have an expression there, but there is no type that can start from the same tokens expressions start.
// So there are cases where our rule matches nothing since the next token doesn't go into recovery but doesn't go into any of the table type rules either.
private table_type_field_recover ::= !('}' | ID | '[' | statement_first | 'end' | last_statement_first)

// I can't pin '(' because there is '(' type ')' type as well
// Even better is the fact that I have ( type ) and ( type ) -> type which are parallel branches, so if we have them nested we will go all the way to the internal and then rollback and then again.
// Rust has a similar problem but in their case content in the parenthesis is equivalent, see TupleOrParenType. In my case it's type and bound_type_list, which are not the same.
function_type ::= func_type_params? <<isFunctionType>> '(' bound_type_list? ')' '->' return_type {
  pin = 3;
  implements=["com.github.aleksandrsl.intellijluau.psi.LuauGenericDeclaration"]
  methods=[getDeclaredGenerics]
}

